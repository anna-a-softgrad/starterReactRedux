global.Promise = require('bluebird'); // for node 0.10
var path                 = require('path');
var webpack           = require('webpack');
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var AssetsPlugin      = require('assets-webpack-plugin');

var buildHash = process.env.NODE_ENV === "production" ? "[hash]" : "dev";

module.exports = {
    context: __dirname,
    entry: {
        main: "./client/app.js",
        vendors: ['./assets/js/bootstrap.js', './assets/js/additional-js.js', './assets/js/react-datetime.js']
    },
    output: {
        path: path.join(__dirname, "/public/static/build/", buildHash),
        filename: "[name]-[hash].js",
        publicPath: "static/build/" + buildHash + "/"
    },
    watch: true,
    watchOptions: {
        aggregateTimeout: 100
    },
    devtool: "source-map",
    module: {
        loaders: [
            {
                test: /\.jsx?$/,
                exclude: /node_modules/,
                loaders: [
                  'react-hot',
                  'babel?presets[]=react,presets[]=es2015,presets[]=stage-0'
                ]
            },
        {
            test: /\.css$/,
            loader: ExtractTextPlugin.extract('style-loader', 'css-loader')
            
        },
            {
                test: /\.less$/,
                loader: ExtractTextPlugin.extract("style-loader", "css-loader!autoprefixer-loader!less-loader")
            },
            {test: /\.svg/, loader: 'svg-url-loader'},

            {
                test: /\.(png|jpg|ttf|eot|woff|woff2)$/,
                loader: 'file?name=[path][name].[ext]'
                
            },
            { test: /\.json$/, loader: "json-loader" },

            { test: /\.txt$/, loader: "raw-loader" }
        ]
    },
    plugins: [
        new webpack.DefinePlugin({
            "process.env": {
                BROWSER: JSON.stringify(true),
                NODE_ENV: JSON.stringify( process.env.NODE_ENV || 'development' )
            }
        }),

      new webpack.ProvidePlugin({
        $: "jquery",
        jQuery: "jquery",
        "window.jQuery": "jquery"
      }),

        new ExtractTextPlugin("[hash].css"),
        new webpack.ContextReplacementPlugin(/moment[\/\\]locale$/, /ru|en|uk|tr/),
        new AssetsPlugin({path: path.join(__dirname, 'etc')})
    ]
};

if (process.env.NODE_ENV == 'production') {
	module.exports.plugins.push(
		new webpack.optimize.UglifyJsPlugin({
			compress: {
				warnings: false,
				drop_console: true,
				unsafe: true
			}
		})
	);
}
function isExternal(module) {
  var userRequest = module.userRequest;

  if (typeof userRequest !== 'string') {
    return false;
  }

  return userRequest.indexOf('/bower_components/') >= 0 ||
         userRequest.indexOf('/node_modules/') >= 0 ||
         userRequest.indexOf('/libraries/') >= 0;
}